#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (PostgreSQL)
"""

from app import app, db
from sqlalchemy import text

def migrate_timing_fields():
    with app.app_context():
        try:
            print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü—É test_result...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø–æ–ª—è (–¥–ª—è PostgreSQL)
            result = db.session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'test_result'
            """))
            columns = [row[0] for row in result.fetchall()]
            
            print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {columns}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º started_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'started_at' not in columns:
                db.session.execute(text("ALTER TABLE test_result ADD COLUMN started_at TIMESTAMP"))
                print("‚úÖ –ü–æ–ª–µ started_at –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ÑπÔ∏è –ü–æ–ª–µ started_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º time_taken –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'time_taken' not in columns:
                db.session.execute(text("ALTER TABLE test_result ADD COLUMN time_taken INTEGER"))
                print("‚úÖ –ü–æ–ª–µ time_taken –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ÑπÔ∏è –ü–æ–ª–µ time_taken —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            db.session.commit()
            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = db.session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'test_result'
                ORDER BY ordinal_position
            """))
            new_columns = [row[0] for row in result.fetchall()]
            print(f"–ü–æ–ª—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {new_columns}")
            
            return True
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

if __name__ == "__main__":
    migrate_timing_fields() 